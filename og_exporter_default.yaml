pg_bgwriter:
  name: pg_stat_bgwriter
  desc: OpenGauss background writer metrics
  query:
    - name: pg_stat_bgwriter
      sql: |-
        SELECT checkpoints_timed,
          checkpoints_req,
          checkpoint_write_time,
          checkpoint_sync_time,
          buffers_checkpoint,
          buffers_clean,
          buffers_backend,
          maxwritten_clean,
          buffers_backend_fsync,
          buffers_alloc,
          stats_reset
        FROM pg_stat_bgwriter
      version: '>=0.0.0'
      timeout: 1
      ttl: 60
      status: enable
  metrics:
    - name: checkpoints_timed
      description: scheduled checkpoints that have been performed
      usage: COUNTER
    - name: checkpoints_req
      description: requested checkpoints that have been performed
      usage: COUNTER
    - name: checkpoint_write_time
      description: time spending on writing files to disk, in µs
      usage: COUNTER
    - name: checkpoint_sync_time
      description: time spending on syncing files to disk, in µs
      usage: COUNTER
    - name: buffers_checkpoint
      description: buffers written during checkpoints
      usage: COUNTER
    - name: buffers_clean
      description: buffers written by the background writer
      usage: COUNTER
    - name: buffers_backend
      description: buffers written directly by a backend
      usage: COUNTER
    - name: maxwritten_clean
      description: times that bgwriter stopped a cleaning scan
      usage: COUNTER
    - name: buffers_backend_fsync
      description: times a backend had to execute its own fsync
      usage: COUNTER
    - name: buffers_alloc
      description: buffers allocated
      usage: COUNTER
    - name: stats_reset
      description: time when statistics were last reset
      usage: COUNTER
  status: enable
  ttl: 60
  timeout: 1
pg_database:
  name: pg_database
  desc: OpenGauss Database size
  query:
    - name: pg_database
      sql: |-
        SELECT datname,
          pg_database_size(pg_database.datname) as size_bytes,
          age(datfrozenxid64)          AS age,
          datistemplate              AS is_template,
          datallowconn               AS allow_conn,
          datconnlimit               AS conn_limit,
          datfrozenxid::TEXT::BIGINT as frozen_xid
        FROM pg_database
        where datname NOT IN ('template0','template1');
      version: '>=0.0.0'
      timeout: 1
      ttl: 60
      status: enable
  metrics:
    - name: datname
      description: Name of this database
      usage: LABEL
    - name: size_bytes
      description: Disk space used by the database
      usage: GAUGE
    - name: age
      description: database age calculated by age(datfrozenxid64)
      usage: GAUGE
    - name: is_template
      description: 1 for template db and 0 for normal db
      usage: GAUGE
    - name: allow_conn
      description: 1 allow connection and 0 does not allow
      usage: GAUGE
    - name: conn_limit
      description: connection limit, -1 for no limit
      usage: GAUGE
    - name: frozen_xid
      description: tuple with xmin below this will always be visable (until wrap around)
      usage: GAUGE
  status: enable
  ttl: 60
  timeout: 1
pg_activity:
  name: pg_activity
  desc: OpenGauss backend activity group by state
  query:
    - name: pg_activity
      sql: |-
        SELECT datname,
               state,
               coalesce(count, 0)             AS count,
               coalesce(max_duration, 0)      AS max_duration,
               coalesce(max_tx_duration, 0)   AS max_tx_duration,
               coalesce(max_conn_duration, 0) AS max_conn_duration
        FROM (SELECT d.oid AS database, d.datname, a.state
              FROM pg_database d,
                   unnest(ARRAY ['active','idle','idle in transaction','idle in transaction (aborted)','fastpath function call','disabled']) a(state)
              WHERE d.datname NOT IN ('template0','template1')) base
                 LEFT JOIN (
            SELECT datname, state,
                   count(*) AS count,
                   max(extract(epoch from now() - state_change)) AS max_duration,
                   max(extract(epoch from now() - xact_start))   AS max_tx_duration,
                   max(extract(epoch from now() - backend_start)) AS max_conn_duration
            FROM pg_stat_activity WHERE pid <> pg_backend_pid()
            GROUP BY datname, state
        ) a USING (datname, state);
      version: '>=1.0.0'
      timeout: 1
      ttl: 60
      status: enable
  metrics:
    - name: datname
      description: Name of this database
      usage: LABEL
    - name: state
      description: connection state
      usage: LABEL
    - name: count
      description: number of connections in this state
      usage: GAUGE
    - name: max_duration
      description: max duration since state change among (datname, state)
      usage: GAUGE
    - name: max_tx_duration
      description: max duration in seconds any active transaction has been running
      usage: GAUGE
    - name: max_conn_duration
      description: max backend session duration since state change among (datname, state)
      usage: GAUGE
  status: enable
  ttl: 60
  timeout: 1
pg_replication:
  name: pg_replication
  query:
    - name: pg_replication
      sql: |-
        SELECT pid,client_addr,application_name,state,sync_state,lsn,
                   lsn - sent_location   as sent_diff,
           lsn - write_location  as write_diff,
           lsn - flush_location  as flush_diff,
           lsn - replay_location as replay_diff,
           sent_location,write_location,flush_location,replay_location,
           backend_uptime,sync_priority
           FROM (
           SELECT pid,
             client_addr,
             application_name,
             state,
             sync_state,
             pg_xlog_location_diff(CASE WHEN pg_is_in_recovery() THEN pg_last_xlog_receive_location() ELSE pg_current_xlog_location() END, '0/0') AS lsn,
             pg_xlog_location_diff(sender_sent_location,'0/0')                          AS sent_location,
             pg_xlog_location_diff(receiver_write_location,'0/0')                         AS write_location,
             pg_xlog_location_diff(receiver_flush_location,'0/0')                         AS flush_location,
             pg_xlog_location_diff(receiver_replay_location,'0/0')                        AS replay_location,
             pg_xlog_location_diff(receiver_replay_location,pg_current_xlog_location())   AS replay_lag,
             extract(EPOCH FROM now() - backend_start) AS backend_uptime,
             sync_priority
        FROM pg_stat_replication) t;
      version: '>=1.0.0'
      timeout: 1
      ttl: 60
      status: enable
  metrics:
    - name: pid
      description: unique walsender pid
      usage: LABEL
    - name: client_addr
      description: client address of wal receiver
      usage: LABEL
    - name: application_name
      description: application name of standby
      usage: LABEL
    - name: state
      description: replication state startup|catchup|streaming|backup|stopping
      usage: LABEL
    - name: sync_state
      description: replication sync state async|potential|sync|quorum
      usage: LABEL
    - name: lsn
      description: current log position on this server
      usage: COUNTER
    - name: sent_diff
      description: last log position sent to this standby server diff with current lsn
      usage: GAUGE
    - name: write_diff
      description: last log position written to disk by this standby server diff with current lsn
      usage: GAUGE
    - name: flush_diff
      description: last log position flushed to disk by this standby server diff with current lsn
      usage: GAUGE
    - name: replay_diff
      description: last log position replayed into the database on this standby server diff with current lsn
      usage: GAUGE
    - name: sent_lsn
      description: last log position sent to this standby server
      usage: COUNTER
    - name: write_lsn
      description: last log position written to disk by this standby server
      usage: COUNTER
    - name: flush_lsn
      description: last log position flushed to disk by this standby server
      usage: COUNTER
    - name: replay_lsn
      description: last log position replayed into the database on this standby server
      usage: COUNTER
    - name: write_lag
      description: latest ACK lsn diff with write (sync-remote-write lag)
      usage: GAUGE
    - name: flush_lag
      description: latest ACK lsn diff with flush (sync-remote-flush lag)
      usage: GAUGE
    - name: replay_lag
      description: latest ACK lsn diff with replay (sync-remote-apply lag)
      usage: GAUGE
    - name: backend_uptime
      description: how long since standby connect to this server
      usage: GAUGE
    - name: backend_xmin
      description: this standby's xmin horizon reported by hot_standby_feedback.
      usage: GAUGE
    - name: sync_priority
      description: priority of being chosen as synchronous standby
      usage: GAUGE
  status: enable
  ttl: 60
  timeout: 1
pg_replication_slots:
  name: pg_replication_slots
  query:
    - name: pg_replication_slots
      sql: |-
        select slot_name,
            database                    as datname,
            coalesce(plugin,'_') as plugin,
            slot_type,datoid,coalesce(database,'_') as database,
            active,
            coalesce(xmin,'_') as xmin,
            coalesce(catalog_xmin,'_') as catalog_xmin,
            restart_lsn,
            pg_xlog_location_diff(pg_current_xlog_location(),restart_lsn) as delay_lsn,
            dummy_standby,
            pg_xlog_location_diff(restart_lsn ,'0/0'::text)        AS restart_lsn,
            pg_xlog_location_diff(CASE WHEN pg_is_in_recovery() THEN pg_last_xlog_receive_location()
            ELSE pg_current_xlog_location() END , restart_lsn)  AS retained_bytes
            from pg_replication_slots;
      version: '>=1.0.0'
      timeout: 1
      ttl: 60
      status: enable
  metrics:
    - name: slot_name
      description: Slot name
      usage: LABEL
    - name: plugin
      description: Logical plugin
      usage: LABEL
    - name: slot_type
      description: Slot type
      usage: LABEL
    - name: datoid
      description: Database oid
      usage: LABEL
    - name: database
      description: Database name
      usage: LABEL
    - name: active
      description: Is active
      usage: LABEL
    - name: xmin
      description: replication xid
      usage: LABEL
    - name: catalog_xmin
      description: logical decode xid
      usage: LABEL
    - name: restart_lsn
      description: Xlog info
      usage: LABEL
    - name: delay_lsn
      description: delay lsn from pg_current_xlog_location()
      usage: GAUGE
    - name: dummy_standby
      description: Is real standby
      usage: DISCARD
  status: enable
  ttl: 60
  timeout: 1
pg_func:
  name: pg_func
  query:
    - name: pg_func
      sql: |-
        SELECT CURRENT_CATALOG AS datname,
          schemaname      AS nspname,
          funcname,
          funcid,
          calls,
          total_time,
          self_time
        FROM pg_stat_user_functions
        ORDER BY 4 DESC LIMIT 128;
      version: '>=1.0.0'
      timeout: 1
      ttl: 60
      status: enable
  metrics:
    - name: datname
      description: database name of this function
      usage: LABEL
    - name: nspname
      description: schema name of this function
      usage: LABEL
    - name: funcname
      description: function name
      usage: LABEL
    - name: funcid
      description: function id, dedupe for funcname override
      usage: LABEL
    - name: calls
      description: how many times this function has been called
      usage: COUNTER
    - name: total_time
      description: how much time spent in this function and it's child function, in ms
      usage: COUNTER
    - name: self_time
      description: how much time spent in this function itself (other func not included), in ms
      usage: COUNTER
  status: enable
  ttl: 60
  timeout: 1
pg_lock:
  name: pg_lock
  desc: OpenGauss lock distribution by mode
  query:
    - name: pg_lock
      sql: |-
        SELECT datname, mode, coalesce(count, 0) AS count
        FROM (
          SELECT d.oid AS database, d.datname, l.mode
          FROM pg_database d,unnest(ARRAY ['AccessShareLock','RowShareLock','RowExclusiveLock','ShareUpdateExclusiveLock','ShareLock','ShareRowExclusiveLock','ExclusiveLock','AccessExclusiveLock']) l(mode)
          WHERE d.datname NOT IN ('template0','template1')) base
        LEFT JOIN (SELECT database, mode, count(1) AS count
                   FROM pg_locks
                   WHERE database IS NOT NULL GROUP BY database, mode) cnt
        USING (database, mode);
      version: '>=0.0.0'
      timeout: 1
      ttl: 60
      status: enable
  metrics:
    - name: datname
      description: Name of this database
      usage: LABEL
    - name: mode
      description: Type of Lock
      usage: LABEL
    - name: count
      description: Number of locks
      usage: GAUGE
  status: enable
  ttl: 60
  timeout: 1
pg_stat_database:
  name: pg_stat_database
  desc: OpenGauss database statistics
  query:
    - name: pg_stat_database
      sql: select * from pg_stat_database where datname NOT IN ('template0','template1')
      version: '>=0.0.0'
      timeout: 3
      ttl: -1
      status: enable
  metrics:
    - name: datid
      description: OID of a database
      usage: LABEL
    - name: datname
      description: Name of this database
      usage: LABEL
    - name: numbackends
      description: Number of backends currently connected to this database. This is the only column in this view that returns a value reflecting current state; all other columns return the accumulated values since the last reset.
      usage: GAUGE
    - name: xact_commit
      description: Number of transactions in this database that have been committed
      usage: COUNTER
    - name: xact_rollback
      description: Number of transactions in this database that have been rolled back
      usage: COUNTER
    - name: blks_read
      description: Number of disk blocks read in this database
      usage: COUNTER
    - name: blks_hit
      description: Number of times disk blocks were found already in the buffer cache, so that a read was not necessary (this only includes hits in the OpenGauss buffer cache, not the operating system's file system cache)
      usage: COUNTER
    - name: tup_returned
      description: Number of rows returned by queries in this database
      usage: COUNTER
    - name: tup_fetched
      description: Number of rows fetched by queries in this database
      usage: COUNTER
    - name: tup_inserted
      description: Number of rows inserted by queries in this database
      usage: COUNTER
    - name: tup_updated
      description: Number of rows updated by queries in this database
      usage: COUNTER
    - name: tup_deleted
      description: Number of rows deleted by queries in this database
      usage: COUNTER
    - name: conflicts
      description: Number of queries canceled due to conflicts with recovery in this database. (Conflicts occur only on standby servers; see pg_stat_database_conflicts for details.)
      usage: COUNTER
    - name: temp_files
      description: Number of temporary files created by queries in this database. All temporary files are counted, regardless of why the temporary file was created (e.g., sorting or hashing), and regardless of the log_temp_files setting.
      usage: COUNTER
    - name: temp_bytes
      description: Total amount of data written to temporary files by queries in this database. All temporary files are counted, regardless of why the temporary file was created, and regardless of the log_temp_files setting.
      usage: COUNTER
    - name: deadlocks
      description: Number of deadlocks detected in this database
      usage: COUNTER
    - name: blk_read_time
      description: Time spent reading data file blocks by backends in this database, in milliseconds
      usage: COUNTER
    - name: blk_write_time
      description: Time spent writing data file blocks by backends in this database, in milliseconds
      usage: COUNTER
    - name: stats_reset
      description: Time at which these statistics were last reset
      usage: COUNTER
  status: enable
  ttl: 60
  timeout: 3
pg_stat_database_conflicts:
  name: pg_stat_database_conflicts
  desc: OpenGauss database statistics conflicts
  query:
    - name: pg_stat_database_conflicts
      sql: select * from pg_stat_database_conflicts where datname NOT IN ('template0','template1');
      version: '>=0.0.0'
      timeout: 1
      ttl: 60
      status: enable
  metrics:
    - name: datid
      description: OID of a database
      usage: LABEL
    - name: datname
      description: Name of this database
      usage: LABEL
    - name: confl_tablespace
      description: Number of queries in this database that have been canceled due to dropped tablespaces
      usage: COUNTER
    - name: confl_lock
      description: Number of queries in this database that have been canceled due to lock timeouts
      usage: COUNTER
    - name: confl_snapshot
      description: Number of queries in this database that have been canceled due to old snapshots
      usage: COUNTER
    - name: confl_bufferpin
      description: Number of queries in this database that have been canceled due to pinned buffers
      usage: COUNTER
    - name: confl_deadlock
      description: Number of queries in this database that have been canceled due to deadlocks
      usage: COUNTER
  status: enable
  ttl: 60
  timeout: 1
pg_run_times:
  name: pg_run_times
  desc: OpenGauss database run times
  query:
    - name: pg_run_times
      sql: select 'cluster_runtime' as run_name,(case pg_is_in_recovery() when 'f' then 1 else 0 end) as db_role,extract(epoch from(now() - pg_postmaster_start_time())) as run_time;
      version: '>=0.0.0'
      timeout: 1
      status: enable
  metrics:
    - name: run_name
      description: Name of cluster
      usage: LABEL
    - name: db_role
      description: Role of database
      usage: GAUGE
    - name: run_time
      description: Run times of cluster
      usage: GAUGE
  status: enable
  ttl: 60
  timeout: 1